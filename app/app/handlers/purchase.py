# app/handlers/purchase.py
from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.config import load_settings
from app.storage import Session, User, KV, Payment, init_db
from datetime import datetime
import random, string

router = Router()
settings = load_settings()

def _get_mode(tg_id: int) -> str:
    with Session() as s:
        row = s.get(KV, f"mode:{tg_id}")
        return row.value if row else "outline"

def _gen_code(prefix="SLAY"):
    body = "".join(random.choices(string.ascii_uppercase + string.digits, k=5))
    return f"{prefix}-{body}"

@router.callback_query(F.data == "purchase")
async def on_purchase(cb: types.CallbackQuery):
    init_db()
    mode = _get_mode(cb.from_user.id)

    # —Ü–µ–Ω–∞: –¥–ª—è mobile –±–µ—Ä—ë–º MOBILE_PRICE_RUB (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞), –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—É—é
    price = (settings.mobile_price_rub if (mode == "mobile" and settings.mobile_price_rub) else settings.da_price_rub) or 0
    url = settings.da_pay_url or "https://www.donationalerts.com/r/SlayNetBot"

    # —Å–æ–∑–¥–∞—ë–º pending-–ø–ª–∞—Ç—ë–∂ —Å –∫–æ–¥–æ–º; watcher —Å–∞–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç
    with Session() as s:
        code = _gen_code("SLAY")
        p = Payment(
            tg_id=cb.from_user.id,
            code=code,
            amount=float(price),
            currency="RUB",
            status="pending",
            created_at=datetime.utcnow(),
        )
        s.add(p)
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥—É–±–ª–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        key = f"mode:{cb.from_user.id}"
        row = s.get(KV, key)
        if not row:
            s.add(KV(key=key, value=mode))
        else:
            row.value = mode
        s.commit()

    kb = InlineKeyboardBuilder()
    kb.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {int(price)} ‚ÇΩ (DonationAlerts)", url=url)
    kb.adjust(1)

    await cb.message.edit_text(
        (
            f"–†–µ–∂–∏–º: {'üì± Reality' if mode=='mobile' else '‚ö° Outline'}\n"
            f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {int(price)} ‚ÇΩ –∑–∞ {settings.default_valid_days} –¥–Ω.\n\n"
            f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ *–∫–æ–¥* –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –¥–æ–Ω–∞—Ç—É: `{code}`\n"
            f"–ë–µ–∑ –∫–æ–¥–∞ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É.\n\n"
            f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        ),
        parse_mode="Markdown",
        reply_markup=kb.as_markup()
    )
    await cb.answer()
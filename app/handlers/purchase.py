# app/handlers/purchase.py
from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.config import load_settings
from app.storage import Session, User, Payment, init_db
import random, string

router = Router()

def _make_code(tg_id: int) -> str:
    suf = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
    return f"SLAY-{suf}"

@router.callback_query(F.data == "purchase")
async def on_purchase(cb: types.CallbackQuery):
    s = load_settings()
    price = getattr(s, "da_price_rub", 0) or 0
    url = getattr(s, "da_pay_url", None) or "https://www.donationalerts.com/r/SlayNetBot"

    init_db()
    code = _make_code(cb.from_user.id)

    with Session() as db:
        # —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
        u = db.query(User).filter_by(tg_id=cb.from_user.id).one_or_none()
        if not u:
            u = User(tg_id=cb.from_user.id, username=cb.from_user.username or "")
            db.add(u)
            db.flush()
        # —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂–Ω—É—é –∑–∞—è–≤–∫—É (pending)
        p = Payment(tg_id=cb.from_user.id, code=code, amount=price, currency="RUB", status="pending")
        db.add(p)
        db.commit()

    kb = InlineKeyboardBuilder()
    kb.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚ÇΩ (DonationAlerts)", url=url)
    kb.adjust(1)

    await cb.message.edit_text(
        f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ –∑–∞ 1 –º–µ—Å—è—Ü.\n\n"
        "üëâ *–í–∞–∂–Ω–æ:* –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —É–∫–∞–∂–∏—Ç–µ –≤ *—Å–æ–æ–±—â–µ–Ω–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É* —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:\n"
        f"`{code}`\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–ª–∞—Ç—ë–∂ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ä–∞–±–æ—á–∏–π –∫–ª—é—á.\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        parse_mode="Markdown",
        reply_markup=kb.as_markup()
    )
    await cb.answer()

@router.callback_query(F.data == "genkey")
async def on_genkey(cb: types.CallbackQuery):
    # –†—É—á–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ)
    from datetime import datetime
    from app.outline_api import OutlineAPI

    s = load_settings()
    init_db()

    with Session() as db:
        u = db.query(User).filter_by(tg_id=cb.from_user.id).one_or_none()
        if not u or not u.expires_at or u.expires_at < datetime.utcnow():
            await cb.message.answer("–°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.")
            await cb.answer(); return

    api = OutlineAPI(s.outline_api_url, s.outline_api_key)
    with Session() as db:
        u = db.query(User).filter_by(tg_id=cb.from_user.id).one()
        if u.current_key_id:
            try:
                await api.delete_key(u.current_key_id)
            except Exception:
                pass
        name = f"user_{u.tg_id}_T1"
        key = await api.create_key(name=name)
        u.current_key_id = key.get("id")
        u.current_key_secret = key.get("accessUrl")
        db.commit()
    await api.close()

    await cb.message.answer(
        "–í–∞—à –∫–ª—é—á –≥–æ—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ ‚Äî Outline –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "*–í–Ω–∏–º–∞–Ω–∏–µ: —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–∏—Ç —Å—Ç–∞—Ä—ã–π –∫–ª—é—á.*\n"
        f"`{u.current_key_secret}`",
        parse_mode="Markdown"
    )
    await cb.answer()